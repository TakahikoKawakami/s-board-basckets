{% extends "base.pug" %}
{% block body %}
link(rel="stylesheet", href="{{ 'fullcalendar/main.css' | node_modules }}")
link(rel="stylesheet", href="{{ 'css/calendar.css' | css }}")

#basket-main
    h1 分析ページ
    p カレンダーをクリックして、分析する期間を指定しましょう
    p データがない日はまず同期をして下さい
    .two-column-container
        .calendar-container
            #calendar
            .calendar-loading
                .loader
            //- div testtesttest
        .condition-container
            form(action="baskets/associate/result", method="get")
                input#analyze-store-id(name="store_id", type="hidden", value="{{ displayStore.storeId }}")
                div(style="margin: 10px;")
                    {% for error in message._schema %}
                    span(style="color: var(--color__danger);") {{error}}<br>
                    {% endfor %}
                .condition_group
                    p 分析対象
                    .date-range_group
                        .center
                            select#select-analyze-target.form__input(name='select_analyze_target')
                                option(value='', disabled) 分析対象
                                option(value='0') 商品 x 商品
                                option(value='1') 客層 x 商品
                    p 期間
                    .date-range_group
                        .inline-container
                            input#analyze-from(name="date_from", placeholder="")
                            p ~ 
                            input#analyze-to(name="date_to", placeholder="")
                    button(type="submit") 分析開始
                .from__group
                    div(style="margin: 10px;")
                        {% for error in message.date_to %}
                        span(style="color: var(--color__danger);") {{error}}<br>
                        {% endfor %}
                    div(style="margin: 10px;")
                        {% for error in message.date_from %}
                        span(style="color: var(--color__danger);") {{error}}<br>
                        {% endfor %}
                    div(style="margin: 10px;")
                        {% for error in message.store_id %}
                        span(style="color: var(--color__danger);") {{error}}<br>
                        {% endfor %}


    #date-modal.modal
        .modal__background.date_modal__close
            .modal__content
                .modal__content__inner
                    .date
                    .message
                    input(type="hidden", name="target_date")
                    #button__for__data.button__group
                        button.sync(stile="display:none;") 同期する
                        button.resync(stile="display:none;") 再同期する
                        button.delete(stile="display:none;") 削除する
                    #button__for__analyze.button__group
                        button#select_start_date 開始日に指定する
                        button#select_end_date 終了日に指定する

script(src="{{ 'fullcalendar/main.js' | node_modules }}")
script.
    document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            contentHeight:"auto",
            editable: true, 
            slotEventOverlap: true, 
            selectable: true, 
            selectMinDistance: 1, 
            views: {
                dayGridMonth: {
                    titleFormat: { year: 'numeric', month: 'numeric' },
                },
            },
            customButtons: {
                //- analysis: {
                //-     text: '分析する',
                //-     click: function() {
                //-         alert('analysis');
                //-     }
                //- }
            },
            headerToolbar: {
                right: 'prev,next',
                center: 'title',
                left: 'today'
            },
            events: function(fetchInfo) {
                // ***** ここでカレンダーデータ取得JSを呼ぶ *****
                getDateListHavingBaskets(fetchInfo.startStr, fetchInfo.endStr);
                //- setCalendarList(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'), callback);
            },
            dateClick: function(info) {
                $('#date-modal').find('.date').text(info.dateStr);
                if ($("td[data-date = " + info.dateStr + " ]").find(".fc-daygrid-day-number").hasClass('hasBaskets')) {
                    $('#date-modal').find('.message').text("データあり");
                    $('#date-modal').find('.sync').hide()
                    $('#date-modal').find('.resync').show()
                    $('#date-modal').find('.delete').show()
                } else {
                    $('#date-modal').find('.message').text("データなし");
                    $('#date-modal').find('.sync').show()
                    $('#date-modal').find('.resync').hide()
                    $('#date-modal').find('.delete').hide()
                }
                $('#date-modal').find('input:hidden[name="target_date"]').val(info.dateStr);
                $('#date-modal').fadeIn(200);
            },
            eventClick: function(calEvent, jsEvent, view) {
            // カレンダーに設定したイベントクリック時のイベント
            },
            select: function(start, end) {
            // カレンダー空白部分をドラッグして範囲指定した時のイベント
            },
            eventDrop: function(event, delta, revertFunc, jsEvent, ui, view) {
            // イベントをドラッグして別日に移動させた時のイベント
            }
        });
        calendar.render();

        $('.modal__content__inner').click(function(event) {
            event.stopPropagation()
        });
        $('.date_modal__close').click(function(event) {
            $('#date-modal').fadeOut(200);
        });
        $('#select_start_date').click(function() {
            let targetDate = $('#date-modal').find('input:hidden[name="target_date"]').val();
            $('#analyze-from').val(targetDate);
            $('#date-modal').fadeOut(200);
        })
        $('#select_end_date').click(function() {
            let targetDate = $('#date-modal').find('input:hidden[name="target_date"]').val();
            $('#analyze-to').val(targetDate);
            $('#date-modal').fadeOut(200);
        })
        
        function getDateListHavingBaskets(startStr, endStr) {
            axios.get('/api/baskets', {
                params: {
                    startDate: startStr,
                    endDate: endStr,
                },
            })
            .then(function (response) {
                $(".calendar-loading").hide();
                resp = response.data
                resp.forEach(function(element, index) {
                    var el = JSON.parse(element);
                    $("td[data-date = " + el.target_date + " ]").find(".fc-daygrid-day-events").removeClass('loader');
                    if (hasBasketInApiResponseData(element)){
                        $("td[data-date = " + el.target_date + " ]").find(".fc-daygrid-day-number").addClass('hasBaskets');
                    } else {
                        $("td[data-date = " + el.target_date + " ]").find(".fc-daygrid-day-number").addClass('hasEmptyBasket');
                    }
                });
                checkSyncBasketsAreFinished();
            })
            .catch(function (error) {
                console.log(error);
            });
            $(".calendar-loading").show();
        };

        $('#date-modal').find('.sync').click(function() {
            let targetDate = $('#date-modal').find('input:hidden[name="target_date"]').val();
            resyncBaskets(targetDate)
                .then(function (response) {
                    closeDateModal();
                })
                .catch(function (error) {
                    console.log(error);
                });
            
            $("td[data-date = " + targetDate + " ]").find(".fc-daygrid-day-number").removeClass('hasBaskets');
            $("td[data-date = " + targetDate + " ]").find(".fc-daygrid-day-events").addClass('loader');

            addLoadingDateToCookie(targetDate);
            closeDateModal();
        });
        
        $('#date-modal').find('.resync').click(function() {
            let targetDate = $('#date-modal').find('input:hidden[name="target_date"]').val();
            resyncBaskets(targetDate)
                .then(function (response) {
                    closeDateModal();
                })
                .catch(function (error) {
                    console.log(error);
                });
            
            $("td[data-date = " + targetDate + " ]").find(".fc-daygrid-day-number").removeClass('hasBaskets');
            $("td[data-date = " + targetDate + " ]").find(".fc-daygrid-day-events").addClass('loader');

            addLoadingDateToCookie(targetDate);
            closeDateModal();
        });

        $('#date-modal').find('.delete').click(function() {
            let targetDate = $('#date-modal').find('input:hidden[name="target_date"]').val();
            deleteBaskets(targetDate)
                .then(function (response) {
                    $("td[data-date = " + targetDate + " ]").find(".fc-daygrid-day-number").removeClass('hasBaskets');
                    closeDateModal();
                })
                .catch(function (error) {
                    console.log(error);
                });
        });

        async function deleteBaskets(dateStr) {
            return axios.delete('/api/baskets', {
                params: {
                    startDate: dateStr,
                    endDate: dateStr,
                }
            })
        };

        async function syncBaskets(dateStr) {
            let csrf = "{{ csrf_token }}"
            return axios.put('/api/baskets', {
                csrf_token: csrf,
                startDate: dateStr,
                endDate: dateStr,
            })
        };

        async function resyncBaskets(dateStr) {
            await deleteBaskets(dateStr);
            let result = await syncBaskets(dateStr);
            return result;
        }

        async function getBasket(dateStr) {
            const targetDateTimeStr = dateStr + "T00:00:00+09:00";
            axios.get('/api/baskets', {
                params: {
                    startDate: targetDateTimeStr,
                    endDate: targetDateTimeStr,
                },
            })
            .then(function (response) {
                if (response.data.length > 0) {
                    $("td[data-date = " + dateStr + " ]").find(".fc-daygrid-day-events").removeClass('loader');
                    if (hasBasketInApiResponseData(response.data[0])> 0){
                        $("td[data-date = " + dateStr + " ]").find(".fc-daygrid-day-number").addClass('hasBaskets');
                    } else {
                        $("td[data-date = " + dateStr + " ]").find(".fc-daygrid-day-number").addClass('hasEmptyBasket');
                    }
                    removeLoadingDateFromCookie(dateStr);
                } else {
                    //- alert('同期できる取引データがありませんでした。')
                }
                return;
            })
            .catch(function (error) {
                console.log(error);
            });
        }

        function hasBasketInApiResponseData(responseData) {
            const data = JSON.parse(responseData);
            const basketList = JSON.parse(data.basket_list);
            return basketList.length > 0;
        }

        function closeDateModal() {
            $('#date-modal').fadeOut(200);
        }

        async function checkSyncBasketsAreFinished() {
            let loadingDateStr = $.cookie("loading-date");
            if (loadingDateStr === undefined) return;
            let loadingDate = loadingDateStr.split(",");
            if (loadingDate.length == 0) return;

            try {
                loadingDate.forEach((value, index) => {
                    $("td[data-date = " + value + " ]").find(".fc-daygrid-day-events").addClass('loader');
                    getBasket(value, value);
                });
            } catch (e) {
                console.log(e);
                $.removeCookie("loading-date");
            }
        }

        function addLoadingDateToCookie(targetDate) {
            let loadingDateStr = $.cookie("loading-date");
            if (loadingDateStr !== undefined && loadingDateStr.split(",").length !== 0) {
                let loadingDate = $.cookie("loading-date").split(",");
                if (!loadingDate.includes(targetDate)) {
                    loadingDate.push(targetDate);
                }
                $.cookie("loading-date", loadingDate.join(","));
            } else {
                $.cookie("loading-date", targetDate);
            }
        }

        function removeLoadingDateFromCookie(targetDate) {
            let loadingDateStr = $.cookie("loading-date");
            if (loadingDateStr === undefined) return;
            let loadingDate = loadingDateStr.split(",");
            if (loadingDate.length == 0) return;

            let removedLoadingDateArray = loadingDate.filter(x =>{
                return x !== targetDate;
            });
            const removedLoadingDateStr = removedLoadingDateArray.join(",");
            if (removedLoadingDateStr === "") {
                $.removeCookie("loading-date");
                return;
            }

            $.cookie("loading-date", removedLoadingDateStr);
            return;
        }

        checkSyncBasketsAreFinished();
        setInterval(checkSyncBasketsAreFinished, 10000);
    });

{% endblock %}
